openapi: 3.0.0

info:
  description: Connect brokerage accounts to your app for live positions and trading
  version: 1.0.0
  title: SnapTrade
  termsOfService: N/A
  contact:
    email: api@snaptrade.com

servers:
  - description: SnapTrade Production API
    url: https://api.passiv.com/api/v1

security:
  - PartnerSignature: []
  - PartnerClientId: []
  - PartnerTimestamp: []
  - PartnerUserId: []

tags:
  - name: API Status
    description: Check whether the API is operational and verify timestamps.
  - name: Development Tools
    description: Test and debug API authentication.
  - name: Authentication
    description: Register and authenticate users with SnapTrade.
  - name: Reference Data
    description: Retrieve basic information for API use, such as supported brokerages, exchanges, currencies, etc.
  - name: Connections and Settings
    description: Retrieve and manage user connections and per-user settings.
  - name: Account Information
    description: Retrieve account information, such as positions, balances, etc.
  - name: Trading
    description: Manage orders on user accounts
  - name: Portfolio Management
    description: Create portfolio groups, model portfolios, and trade calculations for rebalancing.
  - name: Reporting
    description: Retrieve information on account transactions, performance, contributions, etc.

paths:
  /:
    get:
      tags:
        - API Status
      summary: Get API Status
      security: []
      responses:
        "200":
          description: API is alive and kicking in some fashion
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: Unexpected error.

  /snapTrade/mockSignature:
    get:
      tags:
        - Development Tools
      summary: Debug your signature algorithm for get requests
      security: []
      parameters:
        - in: query
          name: clientId
          schema:
            $ref: "#/components/schemas/ClientID"
        - in: query
          name: timestamp
          schema:
            $ref: "#/components/schemas/Timestamp"
      responses:
        "200":
          description: Returns data needed to verify that request signature is correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MockSignatureResponse"
        "500":
          description: Unexpected Error. Please contact support
    post:
      tags:
        - Development Tools
      summary: Debug your signature algorithm for post requests, including the request body
      security: []
      parameters:
        - in: query
          name: clientId
          schema:
            $ref: "#/components/schemas/ClientID"
        - in: query
          name: timestamp
          schema:
            $ref: "#/components/schemas/Timestamp"
      responses:
        "200":
          description: Returns data needed to verify that request signature is correct
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MockSignatureResponse"
        "500":
          description: Unexpected Error. Please contact support
      requestBody:
        $ref: "#/components/requestBodies/MockSignatureRequestBody"

  /snapTrade/registerUser:
    post:
      tags:
        - Authentication
      summary: Register user with SnapTrade in order to create secure brokerage authorizations
      security:
        - PartnerSignature: []
        - PartnerClientId: []
        - PartnerTimestamp: []
      requestBody:
        $ref: "#/components/requestBodies/RegisterUserRequestBody"
      responses:
        "200":
          description: Successfully registered user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIDandSecret"
        "400":
          description: Bad Request. Could be caused by various reasons. Error message is provided in response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "404":
          description: Invalid SnapTrade Client ID provided in query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected error

  /snapTrade/deleteUser:
    post:
      tags:
        - Authentication
      summary: Delete user from SnapTrade, disabling all brokerage authorizations and permanently deleting all data associated with the user
      security:
        - PartnerSignature: []
        - PartnerClientId: []
        - PartnerTimestamp: []
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBody"
      responses:
        "200":
          description: Delete successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error

  /snapTrade/login:
    post:
      tags:
        - Authentication
      summary: Generate a redirect URI to securely login a user to the SnapTrade Connection Portal
      security:
        - PartnerSignature: []
        - PartnerClientId: []
        - PartnerTimestamp: []
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBody"
      responses:
        "200":
          description: Login successful. Redirect user to provided URI in response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRedirectURI"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error

  /holdings:
    get:
      tags:
        - Account Information
      summary: List all accounts for the user, plus balances and positions for each account.
      parameters:
        - in: header
          required: true
          name: Signature
          schema:
            $ref: "#/components/schemas/Signature"
        - in: query
          required: true
          name: clientId
          schema:
            $ref: "#/components/schemas/ClientID"
        - in: query
          required: true
          name: timestamp
          schema:
            $ref: "#/components/schemas/Timestamp"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/SnapTradeUserID"
        - in: query
          name: accounts
          description: Filter holdings by account number
          schema:
            type: string
            example: P1334567
      responses:
        "200":
          description: Returns list of accounts and holdings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountHoldings"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "500":
          description: Unexpected Error

  /accounts:
    get:
      tags:
        - Account Information
      summary: List all investment accounts for the user
      responses:
        "200":
          description: A list of all Account objects for the authenticated user.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error.

  "/accounts/{accountId}":
    get:
      tags:
        - Account Information
      summary: Return details of a specific investment account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account to get detail of.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Details of a specific investment account
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error
    patch:
      tags:
        - Account Information
      summary: Update details of an investment account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account to update.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully updated details of an investment account
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error

  "/accounts/{accountId}/balances":
    get:
      tags:
        - Account Information
      summary: Get all cash balances of an investment account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account get positions.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of all balances in investment account
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Balance"
        default:
          description: Unexpected error

  "/accounts/{accountId}/positions":
    get:
      tags:
        - Account Information
      summary: Get all positions of an investment account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account get positions.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List all positions in investment account
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
        default:
          description: Unexpected error

  "/accounts/{accountId}/orders":
    get:
      tags:
        - Trading
      summary: Get all history of orders placed in account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account get positions.
          schema:
            type: string
            format: uuid
        - in: query
          name: status
          description: defaults value is set to "all"
          schema:
            type: string
            enum:
              - all
              - open
              - executed
        - in: query
          name: days
          description: filter query by number of days since current day. Defaults to 90
          schema:
            type: number
      responses:
        "200":
          description: List all orders in account
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountOrderRecord"
        "500":
          description: Unexpected error

  "/accounts/{accountId}/orders/cancel":
    post:
      tags:
        - Trading
      summary: Cancel open order in account
      parameters:
        - in: path
          name: accountId
          required: true
          description: The ID of the account get positions.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Order Record of canceled order
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/AccountOrderRecord"
        "400":
          description: Unable to cancel open order. Please verify status in brokerage account
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "500":
          description: Unexpected error

  /authorizations:
    get:
      tags:
        - Connections and Settings
      summary: List all brokerage authorizations for the user
      responses:
        "200":
          description: A list of all Authorization objects for the authenticated user.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BrokerageAuthorization"
        default:
          description: Unexpected error.

  "/authorizations/{authorizationId}":
    delete:
      tags:
        - Connections and Settings
      summary: Remove a brokerage authoriation.
      parameters:
        - in: path
          name: authorizationId
          required: true
          description: The ID of the Authorization to delete.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The Authorization object which was deleted.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/BrokerageAuthorization"
        "400":
          description: The specified authorizationId is invalid (not a UUID string).
        "404":
          description: The specified authorizationId was not found.
        default:
          description: Unexpected error.

  /brokerages:
    get:
      tags:
        - Reference Data
      summary: List of all supported brokerages.
      responses:
        "200":
          description: A list of all defined Brokerage objects.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brokerage"
        default:
          description: Unexpected error.

  /currencies:
    get:
      tags:
        - Reference Data
      summary: List of all supported currencies
      responses:
        "200":
          description: A list of all supported currencies.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Currency"
        default:
          description: Unexpected error.

  /currencies/rates:
    get:
      tags:
        - Reference Data
      summary: Return the exchange rates of all supported currencies
      responses:
        "200":
          description: A list of all exchange rates pairs for supported currencies
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExchangeRatePairs"

  "/currencies/rates/{currencyPair}":
    get:
      tags:
        - Reference Data
      summary: Return the exchange rate of a currency pair
      parameters:
        - in: path
          name: currencyPair
          required: true
          description: "A currency pair based on currency code for example, {CAD-USD}"
          schema:
            type: string
      responses:
        "200":
          description: A list of all exchange rates pairs for supported currencies
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/ExchangeRatePairs"

  /modelAssetClass:
    get:
      tags:
        - Portfolio Management
      summary: List of model asset class
      responses:
        "200":
          description: A list of all model asset class objects for the authenticated user.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModelAssetClassDetails"
    post:
      tags:
        - Portfolio Management
      summary: Create a new model asset class
      responses:
        "200":
          description: A new asset class is created.
          content:
            application/object:
              schema:
                type: object
                $ref: "#/components/schemas/ModelAssetClassDetails"

  "/modelAssetClass/{modelAssetClassId}":
    get:
      tags:
        - Portfolio Management
      summary: Get details of a model asset class
      parameters:
        - in: path
          name: modelAssetClassId
          required: true
          description: The ID of the model asset class to get.
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Details of a particular model asset class
          content:
            application/object:
              schema:
                type: object
                $ref: "#/components/schemas/ModelAssetClassDetails"
    post:
      tags:
        - Portfolio Management
      summary: Updates model asset class objects
      parameters:
        - in: path
          name: modelAssetClassId
          required: true
          description: The ID of the model asset class to update.
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        description:
          Use this endpoint change model asset class name and to add or remove a model asset class target.
          <br /><br /> * Only the model asset class name is required for the model asset class object.
          <br /> * Only the symbol id is required for the symbol object in the model asset class target object.
          <br /> * To remove all model asset class targets, set the model asset class target as an empty array
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelAssetClassDetails"
      responses:
        "200":
          description: Updates model asset class with data from request body.
    delete:
      tags:
        - Portfolio Management
      summary: Deletes a model asset class
      parameters:
        - in: path
          name: modelAssetClassId
          required: true
          description: The ID of the model asset class to delete.
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "204":
          description: No content

  /modelPortfolio:
    get:
      tags:
        - Portfolio Management
      summary: List of model portfolio
      responses:
        "200":
          description: A list of all model portfolio objects for the authenticated user.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModelPortfolioDetails"
    post:
      tags:
        - Portfolio Management
      summary: Creates a new model portfolio
      responses:
        "200":
          description: A new model portfolio is created.
          content:
            application/object:
              schema:
                type: object
                $ref: "#/components/schemas/ModelPortfolioDetails"

  /modelPortfolio/{modelPortfolioId}:
    get:
      tags:
        - Portfolio Management
      summary: Get details of a model portfolio
      parameters:
        - in: path
          name: modelPortfolioId
          required: true
          description: The ID of the model portfolio to get.
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Details of a particular model portfolio.
          content:
            application/object:
              schema:
                type: object
                $ref: "#/components/schemas/ModelPortfolioDetails"
    post:
      tags:
        - Portfolio Management
      summary: Updates model portfolio object
      parameters:
        - in: path
          name: modelPortfolioId
          required: true
          description: The ID of the model portfolio to update.
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        required: true
        description:
          Use this endpoint change model asset class name and to add or remove a model portfolio security/model portfolio asset class.
          <br /><br /> * The model portfolio name and model portfolio model type is required.
          <br /> * The model portfolio model type must be either 0 or 1. [0 -> Securities based, 1 -> Asset Class based]
          <br /><br /> * If the model portfolio type is 0, the model portfolio asset class must be an empty array.
          <br /> * If the model portfolio type is 1, the model portfolio security must be an empty array.
          <br /><br /> * When updating the model portfolio security, the percent is required. Only the symbol id is required for the symbol object
          <br /> * When updating the model portfolio asset classes, the percent is required. Only the model asset class id is required for the model asset class object
          <br /><br /> * To remove all model portfolio securities or model portfolio asset class, set then to an empty array
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelPortfolioDetails"
      responses:
        "200":
          description: Updates model portfolio object with data from request body.
    delete:
      tags:
        - Portfolio Management
      summary: Deletes a model portfolio
      parameters:
        - in: path
          name: modelPortfolioId
          required: true
          description: The ID of the model portfolio to delete.
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "204":
          description: No content

  /portfolioGroups:
    get:
      tags:
        - Portfolio Management
      summary: List all portfolio groups
      responses:
        "200":
          description: A list of all PortfolioGroup objects for the authenticated user.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortfolioGroup"
        default:
          description: Unexpected error.
    post:
      tags:
        - Portfolio Management
      summary: Create new portfolio group
      responses:
        "200":
          description: A new PortfolioGroup is created.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/PortfolioGroup"
        "400":
          description: The input data is missing or invalid.
        default:
          description: Unexpected error.
      requestBody:
        $ref: "#/components/requestBodies/PortfolioGroup"

  "/portfolioGroups/{portfolioGroupId}":
    get:
      tags:
        - Portfolio Management
      summary: Get details of a target portfolio
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully gets a target portfolio
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PortfolioGroup"
        default:
          description: Unexpected error
    patch:
      tags:
        - Portfolio Management
      summary: Update an existing target portfolio.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to update.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The PortfolioGroup object which was updated.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/PortfolioGroup"
        "400":
          description: >-
            The specified portfolioGroupId is invalid (not a UUID string) or the
            input data is invalid.
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.
      requestBody:
        $ref: "#/components/requestBodies/PortfolioGroup"
    delete:
      tags:
        - Portfolio Management
      summary: Remove a target portfolio.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to delete.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The PortfolioGroup object which was deleted.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/PortfolioGroup"
        "400":
          description: The specified portfolioGroupId is invalid (not a UUID string).
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.

  "/portfolioGroups/{portfolioGroupId}/accounts":
    get:
      tags:
        - Portfolio Management
      summary: Get all accounts associated with a portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which the accounts are linked.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Accounts linked to portfolio group
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error

  "/portfolioGroups/{portfolioGroupId}/balances":
    get:
      tags:
        - Portfolio Management
      summary: Get sum of cash balances in portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Sum of cash balances across accounts in portfolio group by currency
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Balance"
        "400":
          description: >-
            The specified portfolioGroupId is invalid (not a UUID string) or the
            input data is invalid.
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.

  "/portfolioGroups/{portfolioGroupId}/calculatedtrades":
    get:
      tags:
        - Portfolio Management
      summary: List of trades to make to rebalance portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Calculated trades to make
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/CalculatedTrade"
  "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/{TradeId}":
    get:
      tags:
        - Portfolio Management
      summary: Return an individual trade
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
        - in: path
          name: calculatedTradeId
          required: true
          description: The ID of calculated trade to get account impact
          schema:
            type: string
            format: uuid
        - in: path
          name: TradeId
          required: true
          description: The ID of trade object
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Trade objects
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Trade"

  "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/impact":
    get:
      tags:
        - Trading
      summary: Return the impact of placing a series of trades on the portfolio
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
        - in: path
          name: calculatedTradeId
          required: true
          description: The ID of calculated trade to get account impact
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Impact of trades to make
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TradeImpact"

  "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/modify/{tradeId}":
    get:
      tags:
        - Trading
        - Portfolio Management
      summary: Return details of a specific trade before it's placed
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
        - in: path
          name: calculatedTradeId
          required: true
          description: The ID of calculated trade to get account impact
          schema:
            type: string
            format: uuid
        - in: path
          name: tradeId
          required: true
          description: The ID of trade object
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Trade object
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/Trade"
    patch:
      tags:
        - Trading
        - Portfolio Management
      summary: Modify units of a trade before it is placed
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
        - in: path
          name: calculatedTradeId
          required: true
          description: The ID of calculated trade to get account impact
          schema:
            type: string
            format: uuid
        - in: path
          name: tradeId
          required: true
          description: The ID of trade object
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Modified trade object
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/Trade"
      requestBody:
        content:
          application/object:
            schema:
              $ref: "#/components/schemas/Trade"

  "/portfolioGroups/{portfolioGroupId}/calculatedtrades/{calculatedTradeId}/placeOrders":
    post:
      tags:
        - Trading
      summary: Place orders for the CalculatedTrades in series
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to perform rebalancing calculations
          schema:
            type: string
            format: uuid
        - in: path
          name: calculatedTradeId
          required: true
          description: The ID of calculated trade to get account impact
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Return trade execution statuses for all trades submitted
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TradeExecutionStatus"

  "/portfolioGroups/{portfolioGroupId}/excludedassets":
    get:
      tags:
        - Portfolio Management
      summary: Get an array of excluded assets associated with a portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: >-
            The ID of the PortfolioGroup under which the excluded assets are
            linked.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Array of excluded assets linked to portfolio group
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExcludedAsset"
        default:
          description: Unexpected error
    post:
      tags:
        - Portfolio Management
      summary: Adds an asset to exclude to a portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to exclude an asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: An asset is excluded from calculations in portfolio group.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/ExcludedAsset"
      requestBody:
        content:
          application/object:
            schema:
              $ref: "#/components/schemas/UniversalSymbol"

  "/portfolioGroups/{portfolioGroupId}/excludedassets/{symbolId}":
    delete:
      tags:
        - Portfolio Management
      summary: Unexclude an asset from a portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to unexclude an asset.
          schema:
            type: string
            format: uuid
        - in: path
          name: symbolId
          required: true
          description: The ID of the excluded asset Symbol to delete.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Excluded asset deleted

  "/portfolioGroups/{portfolioGroupId}/import":
    post:
      tags:
        - Portfolio Management
      summary: Import target allocation based on portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Portfolio group target allocation has been updated
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TargetAsset"
        default:
          description: Unexpected error.

  "/portfolioGroups/{portfolioGroupId}/info":
    get:
      tags:
        - Portfolio Management
      summary: >-
        Return a whole bunch of relevant information relating to a portfolio
        group.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Portfolio group target allocation has been updated
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/PortfolioGroupInfo"
        default:
          description: Unexpected error.

  "/portfolioGroups/{portfolioGroupId}/positions":
    get:
      tags:
        - Portfolio Management
      summary: Get total of each postions owned in portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Totals of each postions owned in portfolio group
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PortfolioGroupPosition"
        "400":
          description: >-
            The specified portfolioGroupId is invalid (not a UUID string) or the
            input data is invalid.
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.

  "/portfolioGroups/{portfolioGroupId}/settings":
    get:
      tags:
        - Portfolio Management
      summary: Get portfolio group settings
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to get the settings.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Settings of portfolio group
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/PortfolioGroupSettings"
        default:
          description: Unexpected error
    patch:
      tags:
        - Portfolio Management
      summary: Updates portfolio group settings
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to patch the settings.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Settings of portfolio group
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PortfolioGroupSettings"
        default:
          description: Unexpected error

  "/portfolioGroups/{portfolioGroupId}/symbols":
    post:
      tags:
        - Portfolio Management
      summary: Search for symbols limited to brokerages under the specified portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup to search under
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: >-
            A list of UniversalSymbol objects which match the specified
            substring
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UniversalSymbol"
        default:
          description: Unexpected error.
      requestBody:
        content:
          application/object:
            schema:
              $ref: "#/components/schemas/SymbolQuery"

  "/portfolioGroups/{portfolioGroupId}/targets":
    get:
      tags:
        - Portfolio Management
      summary: Get all target assets under the specified PortfolioGroup.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: All target assets owned by the specified PortfolioGroup.
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TargetAsset"
        "400":
          description: >-
            The specified portfolioGroupId is invalid (not a UUID string) or the
            input data is invalid.
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.
    post:
      tags:
        - Portfolio Management
      summary: Set a new list of target assets under the specified PortfolioGroup. All existing target assets under this portfolio group will be replaced with the new list.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to create the target asset.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A new target asset or set of target assets is created.
          content:
            application/object:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TargetAssetList"
        "400":
          description: >-
            The specified portfolioGroupId is invalid (not a UUID string) or the
            input data is invalid.
        "404":
          description: The specified portfolioGroupId was not found.
        default:
          description: Unexpected error.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TargetAssetList"

  "/portfolioGroups/{portfolioGroupId}/targets/{targetAssetId}":
    get:
      tags:
        - Portfolio Management
      summary: Get a specific target from a portfolio group
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to get the target asset.
          schema:
            type: string
            format: uuid
        - in: path
          name: targetAssetId
          required: true
          description: The ID of the TargetAsset to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully get target asset.
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/TargetAsset"
        default:
          description: Unexpected errors
    patch:
      tags:
        - Portfolio Management
      summary: Update a TargetAsset under the specified PortfolioGroup.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to patch the target asset.
          schema:
            type: string
            format: uuid
        - in: path
          name: targetAssetId
          required: true
          description: The ID of the TargetAsset to patch.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The target asset is updated.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/TargetAsset"
        "400":
          description: >-
            The specified portfolioGroupId or targetAssetId is invalid (not a
            UUID string) or the input data is invalid.
        "404":
          description: The specified portfolioGroupId or targetAssetId was not found.
        default:
          description: Unexpected error.
      requestBody:
        $ref: "#/components/requestBodies/TargetAsset"
    delete:
      tags:
        - Portfolio Management
      summary: Remove a TargetAsset.
      parameters:
        - in: path
          name: portfolioGroupId
          required: true
          description: The ID of the PortfolioGroup under which to remove the target asset.
          schema:
            type: string
            format: uuid
        - in: path
          name: targetAssetId
          required: true
          description: The ID of the TargetAsset to delete.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: The TargetAsset object which was deleted.
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/TargetAsset"
        "400":
          description: >-
            The specified portfolioGroupId or targetAssetId is invalid (not a
            UUID string) or the input data is invalid.
        "404":
          description: The specified portfolioGroupId or targetAssetId was not found.
        default:
          description: Unexpected error.

  /settings:
    get:
      tags:
        - Connections and Settings
      summary: Get the user's global account settings
      responses:
        "200":
          description: Passiv user account settings
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/UserSettings"
    put:
      tags:
        - Connections and Settings
      summary: Update the user's global account settings
      responses:
        "200":
          description: Passiv User account settings
          content:
            application/object:
              schema:
                $ref: "#/components/schemas/UserSettings"
      requestBody:
        content:
          application/object:
            schema:
              $ref: "#/components/schemas/UserSettings"

  /symbols:
    post:
      tags:
        - Reference Data
      summary: Search for symbols
      responses:
        "200":
          description: >-
            A list of UniversalSymbol objects which match the specified
            substring
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UniversalSymbol"
        default:
          description: Unexpected error.
      requestBody:
        content:
          application/object:
            schema:
              $ref: "#/components/schemas/SymbolQuery"

  "/symbols/{symbolId}":
    get:
      tags:
        - Reference Data
      summary: Get details of a symbol
      parameters:
        - in: path
          name: symbolId
          required: true
          description: The ID of the UniversalSymbol to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully gets a symbol
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UniversalSymbol"
        default:
          description: Unexpected error

  "/symbols/{ticker}":
    get:
      tags:
        - Reference Data
      summary: Get details of a symbol by the ticker
      parameters:
        - in: path
          name: ticker
          required: true
          description: The ticker of the UniversalSymbol to get.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully gets a symbol
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UniversalSymbol"
        "404":
          description: No symbol with the specified ticker found.
        default:
          description: Unexpected error

  "/trade/impact":
    post:
      tags:
        - Trading
      summary: Check impact of trades on account.
      responses:
        "200":
          description: Return trade object and it's impact on the account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManualTradeAndImpact"
        "400":
          description: Missing or wrong data format provided in request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: User does not have permissions to place trades
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "500":
          description: Unexpected Error
      requestBody:
        $ref: "#/components/requestBodies/ManualTradeFormRequestBody"

  "/trade/{tradeId}":
    post:
      tags:
        - Trading
      summary: Place order
      parameters:
        - in: path
          name: tradeId
          required: true
          description: The ID of trade object obtain from trade/impact endpoint
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Status of order placed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountOrderRecord"
        "400":
          description: Failed to submit order to broker
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "500":
          description: Unexpected Error
  "/activities/":
    get:
      tags:
        - Reporting
      summary: Get transaction history for a user
      description: Returns activities (transactions) for a user. Optionally can specify timeframe with start and end date
      parameters:
        - in: query
          required: false
          name: startDate
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: endDate
          schema:
            $ref: "#/components/schemas/ReportingDate"
      responses:
        "200":
          description: Successfully retrieved transaction history
          content:
            application/object:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UniversalActivity"

        default:
          description: Unexpected error

components:
  securitySchemes:
    PartnerSignature:
      type: apiKey
      in: header
      name: Signature
    PartnerClientId:
      type: apiKey
      in: query
      name: clientId
    PartnerTimestamp:
      type: apiKey
      in: query
      name: timestamp
    PartnerUserId:
      type: apiKey
      in: query
      name: userId

  requestBodies:
    MockSignatureRequestBody:
      description: Request body to signed. Include it under "content"
      content:
        application/json:
          schema:
            type: object
            example:
              userId: api@passiv.com
              userSecret: CHRIS.P.BACON
    RegisterUserRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SnapTradeRegisterUserRequestBody"
    LoginRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserIDandSecret"
    DeleteUserRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserIDandSecret"
    RedeemTokenRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RedirectTokenandPin"
    PortfolioGroup:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PortfolioGroup"
    TargetAsset:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TargetAsset"
    ManualTradeFormRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ManualTradeForm"
  schemas:
    400FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: "Unable to verify data sent"
        default_code:
          example: 1076
    403FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: "User does not have permission to access this resource"
        default_code:
          example: 1066
    404FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: "The requested resource does not exist."
        default_code:
          example: 1011
    Account:
      description: SnapTradeUser Investment Account
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        brokerage:
          type: string
          example: Passiv Investr
        number:
          type: string
          example: P1334567
        name:
          type: string
          example: Registered Retirement Savings Account
    AccountHoldings:
      description: Account Holdings
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        balances:
          type: array
          items:
            $ref: "#/components/schemas/Balance"
        positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
    AccountOrderRecord:
      description: Record of order in brokerageaccount
      type: object
      properties:
        brokerage_order_id:
          description: Order id returned by brokerage
          type: string
        status:
          description: Status of order
          $ref: "#/components/schemas/AccountOrderRecordStatus"
        symbol:
          description: Brokerage symbol id
          $ref: "#/components/schemas/Id"
        universal_symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        action:
          $ref: "#/components/schemas/Action"
        total_quantity:
          $ref: "#/components/schemas/Units"
        open_quantity:
          $ref: "#/components/schemas/Units"
        canceled_quantity:
          $ref: "#/components/schemas/Units"
        filled_quantity:
          $ref: "#/components/schemas/Units"
        execution_price:
          $ref: "#/components/schemas/Price"
        limit_price:
          $ref: "#/components/schemas/Price"
        stop_price:
          $ref: "#/components/schemas/Price"
        order_type":
          $ref: "#/components/schemas/OrderType"
        time_in_force:
          $ref: "#/components/schemas/TimeInForce"
        time_placed:
          $ref: "#/components/schemas/OrderType"
        time_updated:
          $ref: "#/components/schemas/Time"
        expiry_date:
          $ref: "#/components/schemas/Time"
    AccountOrderRecordStatus:
      type: string
      enum:
        - NONE
        - PENDING
        - ACCEPTED
        - FAILED
        - REJECTED
        - CANCELED
        - PARTIAL_CANCELED
        - CANCEL_PENDING
        - EXECUTED
        - PARTIAL
        - REPLACE_PENDING
        - REPLACED
        - STOPPED
        - SUSPENDED
        - EXPIRED
        - QUEUED
        - TRIGGERED
        - ACTIVATED
        - PENDING_RISK_REVIEW
        - CONTINGENT_ORDER
    Balance:
      description: Account Balance
      type: object
      properties:
        currency:
          $ref: "#/components/schemas/Currency"
        cash:
          type: number
          example: 300.71
    ConsumerKey:
      description: Shared key used to sign requests
      type: string
      example: UxrFb4cHdRWlmJKNuJjA6hoaN8uVa6jPGFVUl2UKHuKmurCnaU
    Currency:
      description: Currency
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "87b24961-b51e-4db8-9226-f198f6518a89"
        code:
          type: string
          example: USD
        name:
          type: string
          example: US Dollar
    Exchange:
      description: Stock Exchange
      type: object
      properties:
        code:
          type: string
          example: NYSE
        name:
          type: string
          example: New York Stock Exchange
    JWT:
      description:
        JWT Token. Used to acess resources in private endpoints available
        only through the Passiv app
      type: object
      properties:
        token:
          type: string
          format: jwt
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImZSbUdsbWFyU1dtZDY5RDkyeGZWbVdCWUxCS0x0QiIsImV4cCI6MTU0MDA1NTMxOSwiZW1haWwiOiJ3b29kQHN5bmNocm92ZXJnZS5jb20iLCJvcmlnX2lhdCI6MTUzNzM3NjkxOX0.ZSn85i3kSBvEP5wuhWOE8_w903N1G1AfiVlD3fmri78
    LoginRedirectURI:
      description: Redirect uri upon successful login
      type: object
      properties:
        redirectURI:
          example: "https://app.passiv.com/snapTrade/redeemToken?token=this$token1does2ntactu4allyexist=="
    MockSignatureResponse:
      description: Mock Signature Response
      type: object
      properties:
        mockConsumerKey:
          $ref: "#/components/schemas/ConsumerKey"
        signedContent:
          $ref: "#/components/schemas/SignedContent"
        signature:
          $ref: "#/components/schemas/Signature"
    ClientID:
      description: SnapTrade Client ID (generated and provided to partner by Passiv)
      type: string
      example: PASSIVTEST
    Position:
      description: Account Position
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/Symbol"
        units:
          type: number
          example: 40
        price:
          type: number
          example: 113.15
    RedirectTokenandPin:
      description: Response when register user is successful
      type: object
      properties:
        token:
          type: string
          example: myDAIBCP/EYqSmMByhMRB65aMa%2BdYhu2xRsGQe0sDd9SgZXMbdRh3eBaTh/bLViVGQoil6p9ytUUVhkqWalejOqCNVkXXTk/iNPTPaFCeh9%2B
        pin:
          type: string
          example: usERdeFiP@1in9
    Signature:
      description: |
        Steps to generate a signature
          * Prepare signed content (see SignedContent schema)
          * Sign content prepared above with HMAC-SHA256 using the UTF-8 encoding
          * Return base64 encoding of sign content along with headers

         Note: Use the shared consumer key provided by Passiv to signed the request

        Example python code
        ```
        import hmac
        import json
        from base64 import b64encode
        from hashlib import sha256
        from urllib.parse import urlencode

        consumer_key = "UxrFb4cHdRWlmJKNuJjA6hoaN8uVa6jPGFVUl2UKHuKmurCnaU".encode()

        request_data = {'userId': 'api@passiv.com', 'userSecret': 'CHRIS.P.BACON'}
        request_path = "/api/v1/snapTrade/mockSignature"
        request_query = "clientId=PASSIVTEST&timestamp=1635790389"

        sig_object = {"content": request_data, "path": request_path, "query": request_query}

        sig_content = json.dumps(sig_object, separators=(",", ":"), sort_keys=True)
        sig_digest = hmac.new(consumer_key, sig_content.encode(), sha256).digest()

        signature = b64encode(sig_digest).decode()
        ```

      type: string
      example: "QJPQgW0Y8mWbG9Whw/fhCYofIgSo/UAo2AIc1bBPMnY="
    SignedContent:
      description: |
        Signed content requires 3 key-value pairs
        * content -> Content included in request body, set to null if no content is included. Sort keys in content alphabetically
        * path -> Url path of request submitted
        * query -> Query params included in requests

        After preparing the key-value pairs, sort them alphabetically and convert them
        into a string.

        Note:
        Remove any extra whitespace characters and delimiters from the signed content.

        For example, some JSON rendering engines will produce output like this:

          -- `{"blue": "moon", "hello": "world"}`

        To produce the correct signature, the JSON should be processed to look like this:

          -- `{"blue":"moon","hello":"world"}`

      type: string
      example: '{"content":{"userId":"api@passiv.com","userSecret":"CHRIS.P.BACON"},"path":"/api/v1/snapTrade/mockSignature","query":"clientId=PASSIVTEST&timestamp=1635790389"}'
    SnapTradeRegisterUserRequestBody:
      description: Data required to register a user via SnapTrade Partner
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/SnapTradeUserID"
    SnapTradeUserID:
      description: SnapTrade User ID. Provided by SnapTrade Partner. Can be any
        string, as long as it's unique to a user
      type: string
      example: api@passiv.com
    SnapTradeUserSecret:
      description: SnapTrade User Secret randomly generated by Passiv.
      type: string
      example: h81@cx1lkalablakwjaltkejraj11=
    Symbol:
      description: Symbol
      type: object
      properties:
        symbol:
          type: string
          example: DIS
        name:
          type: string
          example: The Walt Disney Company
        currency:
          $ref: "#/components/schemas/Currency"
        exchange:
          $ref: "#/components/schemas/Exchange"
    Timestamp:
      externalDocs:
        "url": "https://en.wikipedia.org/wiki/Unix_time"
      description: Unix Epoch time
      type: integer
      example: 1635790389
    UserIDandSecret:
      description: Response when register user is successful
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/SnapTradeUserID"
        userSecret:
          $ref: "#/components/schemas/SnapTradeUserSecret"
    DeleteUserResponse:
      description: Response when delete user is successful
      type: object
      properties:
        status:
          type: string
          example: deleted
          description: Delete status
        userId:
          $ref: "#/components/schemas/SnapTradeUserID"
    BrokerageAuthorizationType:
      type: object
      properties:
        type:
          type: string
          enum:
            - read
            - trade
    Brokerage:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Questrade
        url:
          type: string
          format: url
          example: "https://www.questrade.com/"
        authorization_types:
          type: array
          items:
            $ref: "#/components/schemas/BrokerageAuthorizationType"
    BrokerageAuthorization:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        created:
          $ref: "#/components/schemas/Timestamp"
        brokerage:
          $ref: "#/components/schemas/Brokerage"
        type:
          type: string
          example: trade
    BrokerageSymbol:
      description: Brokerage symbol
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        brokerage_authorization:
          $ref: "#/components/schemas/BrokerageAuthorization"
        description:
          type: string
          example: VANGUARD CDN AGGREGATE BOND INDEX ETF
    CalculatedTrade:
      description: Array of rades to make to rebalance portfolio
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        trades:
          type: array
          items:
            $ref: "#/components/schemas/Trade"
    Email:
      type: string
      format: email
      example: ops@getpassiv.com
    ExchangeRatePairs:
      description: The exchange rate of a pair of currencies
      type: object
      properties:
        src:
          $ref: "#/components/schemas/Currency"
        dst:
          $ref: "#/components/schemas/Currency"
        exchange_rate:
          type: number
          example: 1.32
    ExcludedAsset:
      description: An excluded asset in a portfolio group
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
    Id:
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    ModelAssetClass:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
          example: "06fe1fd7-fc50-43a7-b564-8a2c5f3bab44"
        name:
          type: string
          example: Bonds
    ModelAssetClassDetails:
      type: object
      properties:
        model_asset_class:
          $ref: "#/components/schemas/ModelAssetClass"
        model_asset_class_target:
          type: array
          items:
            $ref: "#/components/schemas/ModelAssetClassTarget"
    ModelAssetClassTarget:
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
    ModelPortfolio:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
          example: "06fe1fd7-fc50-43a7-b564-8a2c5f3bab44"
        name:
          type: string
          example: Passiv 5x Aggressive Growth Fund
        model_type:
          description: "Enum definitions -> [-1: Unassigned, 0: Security Model Portfolio, 1: Asset Class Portfolio]"
          type: integer
          enum: [-1, 0, 1]
          default: -1
    ModelPortfolioAssetClass:
      type: object
      properties:
        model_asset_class:
          $ref: "#/components/schemas/ModelAssetClass"
        percent:
          type: integer
          minimum: 0
          maximum: 100
          example: 100
    ModelPortfolioDetails:
      type: object
      properties:
        model_portfolio:
          $ref: "#/components/schemas/ModelPortfolio"
        model_portfolio_security:
          type: array
          items:
            $ref: "#/components/schemas/ModelPortfolioSecurity"
        model_portfolio_asset_class:
          type: array
          items:
            $ref: "#/components/schemas/ModelPortfolioAssetClass"
    ModelPortfolioSecurity:
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        percent:
          type: integer
          minimum: 0
          maximum: 100
          example: 100
    Percent:
      type: number
      minimum: 0
      maximum: 100
      example: 90
    PortfolioGroup:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Combined Retirement Portfolio
    PortfolioGroupInfo:
      description: Summary of all relevant information about a portfolio group.
      type: object
      properties:
        symbols:
          type: array
          items:
            $ref: "#/components/schemas/UniversalSymbol"
        quotable_symbols:
          type: array
          items:
            $ref: "#/components/schemas/UniversalSymbol"
        balances:
          type: array
          items:
            $ref: "#/components/schemas/Balance"
        positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        target_positions:
          type: array
          items:
            $ref: "#/components/schemas/TargetAsset"
        ideal_positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        excluded_positions:
          type: array
          items:
            $ref: "#/components/schemas/ExcludedAsset"
        calculated_trades:
          type: array
          items:
            $ref: "#/components/schemas/CalculatedTrade"
        brokerage_authorizations:
          type: array
          items:
            $ref: "#/components/schemas/BrokerageAuthorization"
        accuracy:
          type: number
          example: 0.962
        settings:
          $ref: "#/components/schemas/PortfolioGroupSettings"
    PortfolioGroupPosition:
      description: Details of a security held
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        price:
          type: number
          example: 24.81
        units:
          type: integer
          example: 15
    PortfolioGroupSettings:
      type: object
      properties:
        buyOnly:
          type: boolean
          example: true
        cash_optimizer:
          type: boolean
          example: true
        notifyFrequency:
          type: string
          example: "7 00:00:00"
        driftThreshold:
          $ref: "#/components/schemas/Percent"
        preferred_currency:
          $ref: "#/components/schemas/Currency"
    ReportingDate:
      description: Date used to specify timeframe for a reporting call (in YYYY-MM-DD format)
      type: string
      example: "2022-01-24"
    Status:
      description: Status of API
      type: object
      properties:
        version:
          type: string
          example: "1.0"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        online:
          type: boolean
          example: true
    SymbolQuery:
      description: Symbol query for searching for symbols
      type: object
      properties:
        substring:
          type: string
          example: apple
    TargetAsset:
      description: Target percentage of a certain asset
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        percent:
          $ref: "#/components/schemas/Percent"
        is_supported:
          type: boolean
          example: true
        is_excluded:
          type: boolean
          example: true
        meta:
          type: object
    TargetAssetList:
      description: Target percentage of a certain asset
      type: array
      items:
        $ref: "#/components/schemas/TargetAsset"
    Trade:
      description: A trade object
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        account:
          $ref: "#/components/schemas/Account"
        symbol:
          $ref: "#/components/schemas/BrokerageSymbol"
        universal_symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        action:
          type: string
          enum:
            - BUY
            - SELL
          example: BUY
        units:
          type: integer
          example: 6
        modified_units:
          type: number
          description: Modified units if user changes units to trade. Null otherwise
          example: 2
        price:
          type: number
          example: 24.81
        sequence:
          type: integer
          example: 1
    TradeExecutionStatus:
      description: Execution status of a trade
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/BrokerageSymbol"
        universal_symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        trade:
          $ref: "#/components/schemas/Trade"
        state:
          type: string
          description: Execution state of a trade
          enum:
            - Executed
            - Canceled
            - Rejected
            - Failed
            - Not Executed
          example: Executed
        filled_units:
          type: integer
          description: Number of filled units
          example: 3
        action:
          type: string
          description: Action of executed trade
          enum:
            - BUY
            - SELL
          example: Sell
        price:
          type: number
          description: Price of execution
          example: 23.44
        commissions:
          type: number
          description: Fees paid from executing trade
          example: 23.44
        meta:
          type: object
          description: Other misc. data
          example:
            canceledUnits: 2
    TradeImpact:
      description: Impact of a group of trade
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        currency:
          $ref: "#/components/schemas/Currency"
        remaining_cash:
          type: number
          description: Remaining balance after executing all trades
          example: 1.01
        estimated_commissions:
          type: number
          description: Total estimated commissions across all trades to make
          example: 10.05
        forex_fees:
          type: number
          description: Estimated forex fees to pay to excute trades
          example: 2.01
    ManualTrade:
      description: A manual trade object
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        account:
          $ref: "#/components/schemas/Account"
        order_type:
          $ref: "#components/schemas/OrderType"
        time_in_force:
          $ref: "#components/schemas/TimeInForce"
        symbol:
          $ref: "#components/schemas/ManualTradeSymbol"
        action:
          $ref: "#components/schemas/Action"
        units:
          $ref: "#components/schemas/Units"
        price:
          $ref: "#components/schemas/Price"
    ManualTradeSymbol:
      description: Manual trade symbol object
      type: object
      properties:
        brokerage_symbol_id:
          $ref: "#/components/schemas/Id"
        universal_symbol_id:
          $ref: "#/components/schemas/Id"
        currency:
          $ref: "#/components/schemas/Currency"
        local_id:
          type: string
          example: 1048101
        description:
          type: string
          example: Metaverse Global ETF
        symbol:
          type: string
          example: MVGP.U.TO
    ManualTradeBalance:
      description: Balance
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        currency:
          $ref: "#/components/schemas/Currency"
        cash:
          $ref: "#/components/schemas/Cash"
    ManualTradeAndImpact:
      description: Manual Trade and Impact object
      type: object
      properties:
        trade:
          $ref: "#/components/schemas/ManualTrade"
        trade_impacts:
          type: array
          items:
            $ref: "#/components/schemas/ManualTrade"
        combined_remaining_balance:
          $ref: "#/components/schemas/ManualTradeBalance"
    ManualTradeForm:
      description: Manual Trade Form
      type: object
      properties:
        account_id:
          $ref: "#/components/schemas/Id"
        action:
          $ref: "#/components/schemas/Action"
        order_type:
          $ref: "#/components/schemas/OrderType"
        price:
          $ref: "#/components/schemas/Price"
        time_in_force:
          $ref: "#/components/schemas/TimeInForce"
        units:
          $ref: "#/components/schemas/Units"
        universal_symbol_id:
          $ref: "#/components/schemas/Id"
    Cash:
      description: Cash
      type: number
      example: 1.11
    OrderType:
      description: Order Type
      type: string
      enum:
        - Limit
        - Market
    TimeInForce:
      description: |
        Trade time in force:
          * FOK - Fill Or Kill
          * Day - Day

      type: string
      enum:
        - Day
        - FOK
    Action:
      description: Trade Action
      type: string
      enum:
        - BUY
        - SELL
    Units:
      description: Trade Units
      type: number
    Price:
      description: Trade Price
      type: number
      example: 31.33
    UniversalActivity:
      description: A transaction or activity from an institution
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        amount:
          type: number
          example: 263.82
        currency:
          $ref: "#/components/schemas/Currency"
        description:
          type: string
          example: "WALT DISNEY UNIT DIST ON 21 SHS REC 12/31/21 PAY 01/06/22"
        fee:
          type: number
          example: 0.00
        institution:
          type: string
          example: Passiv Investr
        price:
          type: number
          example: 0.40
        settlement_date:
          type: string
          example: "2022-01-06T05:00:00Z"
        symbol:
          $ref: "#/components/schemas/Symbol"
        trade_date:
          type: string
          example: "2022-01-06T05:00:00Z"
        type:
          type: string
          enum:
            [
              DIVIDEND,
              BUY,
              SELL,
              CONTRIBUTION,
              WITHDRAWAL,
              EXTERNAL_ASSET_TRANSFER_IN,
              EXTERNAL_ASSET_TRANSFER_OUT,
              INTERNAL_CASH_TRANSFER_IN,
              INTERNAL_CASH_TRANSFER_OUT,
              INTERNAL_ASSET_TRANSFER_IN,
              INTERNAL_ASSET_TRANSFER_OUT,
              INTEREST,
              REBATE,
              GOV_GRANT,
              TAX,
              FEE,
            ]
        units:
          type: number
          description: Usually but not necessarily an integer
          example: 5
    UniversalSymbol:
      description: Universal symbol
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        symbol:
          type: string
          example: VAB.TO
        description:
          type: string
          example: VANGUARD CDN AGGREGATE BOND INDEX ETF
        currency:
          $ref: "#/components/schemas/Currency"
    UserSettings:
      description: Passiv user account settings
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        name:
          type: string
          example: James Bond
        receive_cash_notification:
          type: boolean
          example: true
        receive_drift_notification:
          type: boolean
          example: true
        user_trial_activated:
          type: boolean
          example: true
        activated_trial_date:
          type: string
          format: dateTime
          example: "2017-07-17T15:13:07.177712+00:00"
        demo:
          type: boolean
          example: false
        api_enabled:
          type: boolean
          example: false
        drift_threshold:
          type: number
          example: 95.0
        preferred_currency:
          $ref: "#/components/schemas/Currency"
    Time:
      description: Time
      type: string
      example: 2022-01-21T15:11:19.217000-05:00
